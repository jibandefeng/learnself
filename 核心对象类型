                                      python对象类型
                                      
--在python中，数据是以对象的形式出现的。python程序可以分解成模块，语句，表达式以及对象。

  程序由模块构成、
  
  模块包含语句。
  
  语句包含表达式。
  
  表达式建立并处理对象。
  
  --核心对象类型：
  
      数字          124，3.1415,3+4j,Decimal,Fraction
      
      字符串        'spam',"guidi's",b'a\xolc'
      
      列表         [1,[2,'three'],4]
      
      字典         {'food':'spam','taste':'yum'}
      
      元组        (1,'spam',4,'U')
      
      文件         myfile=open('eggs','r')
      
      集合         set('abc'),{'a','b','c'}
      
      其它类型     None,布尔型
      
      编程单元类型     函数，模块，类，
      
      实现相关类型     编译的代码跟踪
      
数字类型



--一般包括整数，浮点数，以及更为少见的类型。（有虚部的复数，固定精度的十进制数，带分子和分母的有理分数以及集合等。）

--数字支持一般的数学运算。

>>> 123+222
345

>>> 1.5*4
6.0

>>> 2**100
1267650600228229401496703205376

>>> len(str(2**100))    #打印二的一百次方的位数
31

浮点数的话，有可能有些奇怪。

>>> 3.1415*2
6.2830000000000004

这个是显示的问题，这证明有两种打印方法。全精度以及友好的方式。第一种形式可以看作是对象的代码形式rerp，第二种是用户友好形式str如果有些东西奇怪，

请试着打印语句显示它。

>>> print(3.1415*2)
6.283

--除了表达式外，和python一起分发的还有一些常用的模块，模块只不过是导入以供使用的一些工具。

>>> import math
>>> math.pi
3.141592653589793

math模块包括更高级的数学工具，如函数，而random模块可以作为随机数字的生成器和随机选择器。

>>> import random
>>> random.random()
0.21211711314533177
>>> random.choice([1,2,3,4])
1

python还包括了一些较为少见的数字对象，如复数，固定精度十进制数，有理数，集合，布尔值。

字符串



--字符串是用来记录文本信息的。它们在python中作为序列。序列中的元素包含了一个从左到右的顺序---序列中的元素根据它们的相对位置进行存储。严格的说，字符串是

单个字符的字符串的序列。其他类型的序列还包括列表和元组

序列的操作



作为序列，字符串支持假设其中各个元素包含位置顺序的操作，如有一个四个字符的字符串，我们通过内置的len函数验证其长度并通过索引操作得到其各个元素。


>>> S='spam'
>>> len(S)         #返回其字符串个数
4
>>> S[0]           
's'
>>> S[1]
'p'

python中，索引是按照从最前面的偏移量进行编码的。从0开始，第一项索引为0，第二项索引为1，以此类推。

--python变量不需要提前声明。当一个变量赋值的时候就创建了。可能赋的是任何类型的对象。当变量出现在一个表达式中的时候，就会用其值替换它。在使用变量前必须先

对其赋值。我们需要把一个对象赋给一个变量以保存它以供随后使用

--python中，我们能够反向索引。

>>> S[-1]
'm'
>>> S[-2]
'a'

一般来说，负的索引号可能会简单地与字符串的长度相加，因此，以下两个操作是等价的。

>>> S[-1]
'm'
>>> S[len(S)-1]
'm'

我们能够在方括号中使用任意表达式。而不仅仅是数字常量---只要python需要一个值，我们就可以使用一个常量，一个变量或者任意表达式。python语法在这方面通用的。

除了简单的从位置进行索引，序列也支持分片操作。

>>> S
'spam'
>>> S[1:3]    #在字符串S中从偏移量1到2（也就是3-1），的所有字符串，效果就是切片或‘分离出’中间的两个字符
'pa'

可以把它们看作从一个字符串中一步就提取出一部分的方法，一般形式为[i:j]，表示取出在x中从偏移量为i，直到但不包含偏移量为j的内容。结果就是返回一个新的对象。

--在切片中，左边界默认为0，并且右边界默认为切片序列的长度，这引入了一些变体。

>>> S[1:]
'pam'
>>> S
'spam'
>>> S[0:3]
'spa'
>>> S[:3]
'spa'
>>> S[:-1]
'spa'
>>> S[:]         #拷贝整个字符串
'spam'

--字符串也支持加号进行合并

>>> S
'spam'
>>> S+'xyz'  #对于字符串，+号意义为合并
'spamxyz'
>>> S
'spam'
>>> S*8      #对于字符串，*号表示重复
'spamspamspamspamspamspamspamspam'

--加号对不同的对有不同的意义。对于数字为加法，对于字符串为合并。一个操作的意义取决与操作的对象。

--字符串创建后不能就地改变。不能通过对某一位置赋值而改变字符串。但是可以通过建立一个人新的字符串并以同一个变量名对其进行赋值。python在运行过程中会清理

旧的对象。

>>> S
'spam'
>>> S[0]='z'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> S='z'+S[1:]
>>> S
'zpam'

--python中的对象可以分为可变对象和不可变对象。

--在核心类型中，数字，字符串，元组是不可变的。

--此外，字符串还有一些独有的方法存在。

    字符串的find方法是一个基本的字符串查找操作。它将返回一个传入字符串的偏移量，没有找到的情况下返回-1。而字符串的replace方法将会对全局进行搜索和替换。
    
>>> S='spam'
>>> S.find('pa')
1
>>> S.replace('pa','xyz')
'sxyzm'
>>> S
'spam'

这里不会改变原始的字符串，而是会创建一个新的字符串作为结果。因为字符串具有不可变性。其他的方法还能够实现通过分隔符将字符串拆分为子字符串，大小变换，测试

字符串的内容，去掉字符串后面的空格字符等。

>>> line='aaa,bbb,bbbb,dd'
>>> line.split(',')          #split方法用，拆分字符串希形成列表
['aaa', 'bbb', 'bbbb', 'dd']

>>> S='spam'
>>> S.upper()               #upper方法将字符串转换为大写
'SPAM'
>>> S.isalpha()             #测试字符串的内容
True

>>> line='aaa,bbb,cccc,dd\n'
>>> line=line.rstrip()      移除右边的空格符
>>> line
'aaa,bbb,cccc,dd'

字符串还支持格式化的高级操作。

>>> '%s,eggs,and %s' % ('spam','SPAM')
'spam,eggs,and SPAM'
>>> '{0},eggs,and {1}'.format('spam','SPAM')          #python2.6和3.0中
'spam,eggs,and SPAM'

--虽然序列操作通用，但方法不通用。可用作多种类型的通用型操作都是以内置函数或表达式的形式出现的。如aString.upper()。

--对于等多的细节，可以调用内置的dir函数，它将返回一个列表包含了对象的所有属性，由于方法是函数属性，也会在列表中

>>> dir(S)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__'
, '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'e
ncode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isal
num', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric',
 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstr
ip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartitio
n', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase'
, 'title', 'translate', 'upper', 'zfill']

一般来说，以双下划线开头并结尾的变量名是用来表示python实现细节的命名模式，而这个列表中没有下划线的属性是字符串对象能够调用的方法。

--如果要查询它们是做什么的，可以将其传递给help函数。

>>> help(S.replace)
Help on built-in function replace:

replace(...) method of builtins.str instance
    S.replace(old, new[, count]) -> str

    Return a copy of S with all occurrences of substring
    old replaced by new.  If the optional argument count is
    given, only the first count occurrences are replaced.


--可以用反斜线转义序列表示特殊的字符。

>>> S='A\nB\tC'
>>> len(S)
5

>>> ord('\n')
10

>>> S='A\0B\0C'
>>> len(S)
5

python允许字符串包含在单引号或者双引号中。也允许在三引号中包含多行字符串常量，当用这种形式的时候，所有的行都合并在一起，并在每一行的末尾增加换行符。

>>> msp="""aaaaaaa
... bbbbb'''bbbbbbb"'bbbbbbb'bbbb
... cccccccccc"""
>>> msp
'aaaaaaa\nbbbbb\'\'\'bbbbbbb"\'bbbbbbb\'bbbb\ncccccccccc'

python也支持原始字符串常量（raw），即去掉反斜线转义机制（以字母'r'开头）python还支持Unicode字符串形式。3.0中基本的str字符串类型也处理Unicode并且用

bytes类型表示原始字节字符串，2.6中Unicode是中单独的类型，str处理8位字符串和二进制数据。3.0中，文件也改变为返回和接受str，从而处理二进制数据文本和字节

--python中进行模式匹配需要导入re模块。

>>> import re
>>> match=re.match('Hello[ \t]*(.*)world','Hello   python world')
>>> match.group(1)
'python '

这个例子是搜索字符串，以“Hello”开始，后面跟着零个或者几个制表符或者空格，接着有任意字符并将其保存至匹配的group中，最后以'world.'结尾。如果找到了这样

的字符串，与模式中括号包括包含的部分匹配的子字符串的对应部分保存为组。

>>> match=re.match('/(.*)/(.*)/(.*)','/usr/home/lumjac')
>>> match.groups()
('usr', 'home', 'lumjac')

















































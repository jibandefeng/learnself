                                             如何运行程序

--windows中，在DOS终端窗口输入。（‘开始’--------->>‘运行’-------->>‘cmd’）

--linux，Unix中在终端输入

--将python改为机器上python可执行文件的完整路径。

    linux，unix上输入usr/local/bin/python(或者/usr/bin/python)
    
    windows上输入C:\python30\python(或者C:\python27\python)
 得到   
    C:\Users\Administrator>python
Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
>>>

--在windows中也可以通过启动IDLE主窗口或者从python的Start菜单选项中选择‘python（command line）’来开始类似的会话。它们都会产生一个具有同样功能的

python交互式命令提示符。而不必输入一条shell命令。

--在交互模式下工作，输入代码的结果在按下回车键后在>>>这一行后显示。

如：

>>> print('hello world')
hello world
>>> print(2**8)
256

这两行打印了一个python的字符串和一个整数。（2**8的意思是2的8次方）

--在交互模式下将会自动打印输入表达式的结果，在这个提示模式下不需要刻意的输入‘print’

>>> 2**8
256
>>> a='hello'  （把hello字符串的值赋给变量a来保存它）
>>> a           （输出a值，交互模式下不用刻意的输入‘print’）
'hello'

--退出交互模式回到shell模式

    unix中输入Ctrl+D
    
    windows中输入Ctrl+Z
    
    IDLE GUI中输入CTRL+D或者关闭窗口
 
--在交互模式下输入输出时，不必要创建一个源文件，也没有必要在运行前通过编译器或者连接器，和C\C++不一样

--在交互模式下，它不会把代码保存到一个文件中，所以它不适合编写大量的代码，可以用它来方便的测试编写的程序文件。如果对一段代码有疑惑，可以打开交互模式

来看看结果。

例如你在一个程序中不明白'abc'*8 的表达式时，可以用交互模式试下

>>> 'abc'*8       （它表示重复字符串，*表示数字相乘，对于字符串来说则表示重复，就是把字符串重复地连接到自身）
'abcabcabcabcabcabcabcabc'

--当你在交互模式中犯了错误，如：

>>> x
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'x' is not defined

它不会导致python或者计算机崩溃，而是会得到错误的信息，指出错误和出错的代码行，让你发现问题。

--交互模式也是测试已经写入文件中的代码的好地方，你可以交互的导入模块文件，并在交互模式下输入命令进行测试。

例如，在python标准库所附带的预编码的模块中测试一个函数

>>> import os    
>>> os.getcwd()     （它显示出当前所工作的目录的名称）
'C:\\Users\\Administrator'

--在交互模式下只能输入python命令。有一些方法可以使用系统命令（如os.system），但是不能直接输入

--在交互模式下没有必要输入完整的打印语句。但是在文件中编写代码时，就需要输入完整的print语句了。

--输入python程序时，在交互模式和文本文件中，没有嵌套的语句都在第一列。

--在交互模式下输入多条语句时，提示符会在第二行以及后边的行中由>>>变成...在IDLE中，第一行之后的行会被自动缩进

--交互模式下要结束多行输入，按下回车键两次即可，才能自动运行一条复合语句

--在文件中空行是没有必要的。有的话也会自动忽略，交互模式下如果没有在复合语句末尾按两下回车，它会一直等着你，知道把它关闭

例如：

>>> for i in 'aaa':
...     print(i)
...                    （必须要输入两次回车才能看到结果）
a
a
a

--第一个文件示例：命名为script1.py

#first python

import sys   (导入sys内置模块)

print(sys.platform)   #(打印出工作的计算机的类型) 

print(2**100)         #（打印2的100次方）

x='Spam!'              #（x引用一个字符串的值）

print(x*8)             #（重复）

cmd进入到当前工作环境中输入 python script1.py

得到如下结果：

C:\Users\Administrator\Desktop>python script1.py

win32

1267650600228229401496703205376

Spam!Spam!Spam!Spam!Spam!Spam!Spam!Spam!

以上就是python文件执行后的结果！

#后面为python的注释，python运行时不会执行，增加的程序的可读性

--流的重定向：我们可以用特定的shell语句，把python脚本的输出保存到一个文件中保存起来

C:\Users\Administrator\Desktop>python script1.py > save.txt

前面输出的内容将会保存到save.txt的文件中，这种输入输出叫做流的重定向，在windows和linux中都适用，

--如果你所在的目录和工作的目录不同，就要给出完整的路径 如 python C:\Users\Administrator\Desktop\script1.py

--如果python在你的系统路径中，则可以省略掉python本身 C:\Users\Administrator\Desktop>script1.py

--如果你的PATH没有包含python的目录，python和脚本都没在你所工作的目录中，那么两个都要使用完整的路径




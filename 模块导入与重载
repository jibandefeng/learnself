                                         模块的导入与重载
                                         
--简单的来说，一个以py扩展名结尾的python源代码文件都是一个模块。其他的文件可以通过导入一个模块读取那个文件的内容，这种基于模块的方式使模块变成了python

程序架构的一个核心概念。更大的程序往往以多个模块恩文件的形式出现，并且导入了其他模块文件的工具。其中的一个文件设计成主文件，或者叫做顶层文件（启动后能够

完整运行整个程序的文件。）

新建一个py文件，写入printed（‘hello’），保存为a.py

>>> import a
hello

这可以运行，默认情况下，只在每次会话的第一次运行，第一次导入后，其他的导入都不会再工作。甚至在另一个窗口中改变并保存了模块的源代码文件也不行。

>>> import a
>>> import a

这是有意设计的，导入是一个开销很大的操作。以至于每个文件，每个程序运行不能够重复多于一次。导入必须找到文件，将其编译成字节码，并且运行代码。

如果真的想要python在同一会话中再次运行文件，需要调用imp标准库中的reload函数。（python2中是内置函数，python3中不是）

>>> import a
>>> import a
>>> from imp import reload
>>> reload(a)          #python2中直接用reload(a)
hello
<module 'a' from 'C:\\Users\\Administrator\\Desktop\\eee\\a.py'>

from直接从一个模块中复制出一个名字，reload函数载入并运行了文件的最新代码，如果你在另一个窗口中修改并保存了它，将会反映出修改的变化。

--reload获得的参数是一个已经加载了的模块对象的名称，所以在重载之前，确保已经成功导入了这个模块，reload函数在模块对象的名称前需要括号，import则不需要，

reload是一个被调用的函数，而import则是一个语句。

--导入者得到了模块文件中顶层所定义的所有变量名。这些变量名通常被赋值给模块函数，类，变量以及其他被导出的工具。表面导航看，一个模块文件的变量名可以通过

两个python语句读取--import，from，以及reload调用。



--新建一个myfile.py的文件。写入title="The Meaning of life"

当文件导入时，它的代码运行并生成了模块的属性。这个赋值语句创建了一个名为title的模块的属性。

可以用两种方法从其他组建中获得这个模块的title属性。

1.通过import语句将模块作为一个整体载入，并使用模块名后跟一个属性名来获取它。

>>> import myfile
>>> print(myfile.title)
The Meaning of Life

.号代表了object.attribute的语法。可以从任何的object中取出任意的属性，即mylifie.title。

2.通过from导入

>>> from myfile import title
>>> print(title)
The Meaning of Life

两种方法很相似，只不过from方法增加了对载入组件的变量名的额外赋值。可以说，from复制了模块的属性，以便属性能够成为接收者的直接变量。因此，能够直接以

title引用导入字符串而不是以myfile，title。

--实际应用中，模块文件往往定义了多个可被外界文件使用的变量名。

创建一个threename.py文件，内容为

a='dead'

b='parrot'

c='sketch'

print（a,b,c）

threename.py定义了三个变量，并对外界生成了三个属性，在print中打印出来

>>> import threename
dead parrot sketch

>>> threename.b
'parrot'

这个文件的客户端通过import得到了具有属性的模块，而使用from时，会得到文件变量名的副本

>>> from threename import b
>>> b
'parrot'

--内置的dir函数可以获得模块内部的可用变量名列表。

>>> dir(threename)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__','__package__', '__spec__', 'a', 'b', 'c']

进行调用后它将返回这个模块内部的所有属性有些是‘免费的’，以双下划线开头并结尾的变量名通常都是由python预定义的内置变量名，通过代码赋值得到定义的变量

（a,b,c）在dir的最后显示。

--模块和命名空间：python程序由多个文件模块构成，通过导入连接起来。每个文件是一个独立完整的变量包。即一个命名空间。一个模块文件不鞥看到其他文件定义的

变量名，除非显式的导入。所以模块文件在代码中起到了最小化命名冲突。即使在拼写相同的情况下。正是由于模块将变量封装为不同部分，使python具有了避免命名冲突

的优点。

--reload是不可传递的。重载一个模块的话只会重载该模块，而不能够重载该，模块所导入的任何一个模块，因此，有时候必须reloas多个文件。

--exec运行文件。exec内置函数也可以运行模块文件。

>>> exec(open('script1.py').read())
hello

每次运行的时候它都重新运行文件，而不是导入模块。但是，因为exec的工作机制就好像在调用他的地方粘贴了代码一样。对于当前正在使用的变量有潜在的默认负载的
可能。

有a=11的变量，当运行script1后，文件中的a的值便覆盖了原来的a.

>>> a=11
>>> exec(open('script1.py').read())
hello
>>> a
'hello'

相反的基本的import语句每个进程只运行文件一次，并且它会把文件生成到一个单独的模块文件名称中。以便他的赋值不会改变你的作用域中的变量。




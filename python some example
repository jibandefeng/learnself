-- 用户输入数字，返回数字的二次方，如果输入stop则结束程序
while True:    #  循环
    reply = input('enter text:')  # 用户输入数据
    if reply == "stop": break     # 判断输入的数据是不是stop，是的话结束
    print(int(reply)*2)           #不是的话输出输入的数的二次方
print('bye')                      最后打印bye

这程序不能判断用户输入的是不是符合要求。

=========================================================================================================================================

while True:                        # 循环
    reply = input('enter text:')   # 用户输入数据
    if reply == "stop":break       # 判断输入的是不是stop，是的话结束
    elif not reply.isdigit():      # 不是的话判断是不是数字，reply.isdigit()是数字的话则为True，不是的话返回False
        print('bad')               # 输入的不符合，则打印bad
    else:
        print(int(reply)*2)        # 输入的符合，则打印二次方
print('bye')                       # 最后打印bye

此程序在原基础上加了判断用户输入的是不是数字

=========================================================================================================================================

while True:                        # 循环
    reply = input('enter etxt:')   # 用户输入数据
    if reply == "stop":break       # 判断输入的是不是stop，是的话结束
    try:                           # 捕捉异常
        num = int(reply)           # 就爱那个输入的数据转化为整数
    except:                        # 捕捉到异常
        print('bad')               # 捕捉异常后打印bad
    else:                          # 没有异常 
        print(num*2)               # 正常则打印二次方 
print('bye')                       # 最后打印bye

该程序用try，except监视num = int(reply) 异常则不符合用户输入，打印bad，正常则走else

==========================================================================================================================================

while True:                        # 循环
    reply = input('enter text:')   # 用户输入数据
    if reply == 'stop':break       # 判断输入的是不是stop是的话退出程序
    elif not reply.isdigit():      # 判断输入的是不是数字
        print('bad')               # 不是的话则打印bad
    else:                
        num = int(reply)           # 将输入的数据转化为整数
        if num < 20:               # 判断输入的是不是小于20
            print('low')           # 是的话打印小了
        else:                
            print(num * 20)        # 不是的话打印二次方
print('bye')                       # 最后打印bye
            
此程序在判断输入的数据符合要求后嵌套一个if来判断输入的是不是小于20

--总结： 用户输入数据， 求输入的平方，并且输入的数大于20，如果输入stop的话退出程序，否则一直继续。最后打印bye

--思路： 先循环 ==>> 用户输入数据 ==>> 判断输入的是不是stop，是的话结束循环退出程序，不是的话 ==>> 判断输入的数据是不是数字(isdigit())，不是的话打印

bad，是的话 ==>> 嵌套if判断输入的是不是小于20，不是的话打印low，是的话求出二次方 ==>> 最后打印bye

========================================================================================================================================

模拟一个登录系统
print('--------------欢迎登录-------------')  
login_list = {123:'123',           # 所拥有的用户
               456:'456',
               789:'789',
               }
lock_dict = {}                     # 定义一个锁定名单
check_number = 1                   # 锁定计数器
while True:
    login_username = input('please input username:')
    login_password = input('please input password:')          # 输入帐号和密码
    if login_username.isdigit():                              # 判断输入的是不是数字符合要求
        login_username = int(login_username)                  # 转为int类型
        if login_username in login_list:                      # 判断是不是用户
            if (login_username,login_password) in list(login_list.items()):     # 帐号密码正确，则正常
                print('welcome to login.......')

            else:
                print('username error please reinput')        # 帐号不正确
                if login_username  in list(lock_dict.keys()): # 判断帐号在不在被锁定名单
                    lock_dict[login_username] += 1            # 锁定次数加一
                    print(lock_dict)                          # 打印锁定列表    
                    if lock_dict[login_username] == 3:        #判断是不是输入错误三次
                        print('locked')                       # 锁定，退出
                        exit()
                    else:
                        print(lock_dict)
                else:
                    lock_dict[login_username] = check_number # 帐号第一次输错，则加入锁定名单
                    print(lock_dict)
        else:
             print("not exist")                              # 帐号不存在

    else:
        print('not exist')                                   # 帐号不存在
        
  这次模拟一个简单的登录系统，用户输入帐号密码，无效帐号不存在。正确帐号输入三次错误密码后锁定！










